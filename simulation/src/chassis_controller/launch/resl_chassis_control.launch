  <launch>
  <!-- ============================================== -->
  <!--        1. 全局参数配置（硬件和控制器共用）          -->
  <!-- ============================================== -->
  <param name="/chassis/motor_ids"   value="[1, 2, 3, 4]" type="yaml" />
  <param name="/can_device"          value="can0" />
  <param name="/can_baud_rate"       value="1000000" />
  <param name="/can_thread_priority" value="50" />

  <rosparam file="$(find chassis_controller)/config/real_chassis_control.yaml" command="load" />

  <!-- ============================================== -->
  <!--    2. ros_control核心：硬件节点 + 控制器管理器     -->
  <!-- ============================================== -->
  <node name="controller_manager"     pkg="controller_manager" 
        type="controller_manager"     output="screen" />
  <node name="chassis_plugin_loader"  pkg="chassis_hw" 
        type="chassis_plugin_loader"  output="screen" />


  <!-- ============================================== -->
  <!--      3. 加载控制器（依赖硬件和管理器启动完成）       -->
  <!-- ============================================== -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner"
        respawn="false"           output="screen"          args="controller/chassis_controller
                                                                 controller/joint_state_controller">

    <param name="wait_for" value="chassis_plugin_loader controller_manager" />
    
  </node>


  <!-- ============================================== -->
  <!--       4. 键盘控制节点（发送/cmd_vel控制底盘）       -->
  <!-- ============================================== -->
  <node name="teleop_twist_keyboard"    pkg="teleop_twist_keyboard"
        type="teleop_twist_keyboard.py" output="screen" />

</launch>