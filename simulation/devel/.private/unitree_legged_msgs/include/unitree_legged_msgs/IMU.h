// Generated by gencpp from file unitree_legged_msgs/IMU.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_IMU_H
#define UNITREE_LEGGED_MSGS_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : quaternion()
    , gyroscope()
    , accelerometer()
    , rpy()
    , temperature(0)  {
      quaternion.assign(0.0);

      gyroscope.assign(0.0);

      accelerometer.assign(0.0);

      rpy.assign(0.0);
  }
  IMU_(const ContainerAllocator& _alloc)
    : quaternion()
    , gyroscope()
    , accelerometer()
    , rpy()
    , temperature(0)  {
  (void)_alloc;
      quaternion.assign(0.0);

      gyroscope.assign(0.0);

      accelerometer.assign(0.0);

      rpy.assign(0.0);
  }



   typedef boost::array<float, 4>  _quaternion_type;
  _quaternion_type quaternion;

   typedef boost::array<float, 3>  _gyroscope_type;
  _gyroscope_type gyroscope;

   typedef boost::array<float, 3>  _accelerometer_type;
  _accelerometer_type accelerometer;

   typedef boost::array<float, 3>  _rpy_type;
  _rpy_type rpy;

   typedef int8_t _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::unitree_legged_msgs::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::unitree_legged_msgs::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::unitree_legged_msgs::IMU > IMUPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::IMU_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::IMU_<ContainerAllocator2> & rhs)
{
  return lhs.quaternion == rhs.quaternion &&
    lhs.gyroscope == rhs.gyroscope &&
    lhs.accelerometer == rhs.accelerometer &&
    lhs.rpy == rhs.rpy &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::IMU_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::IMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2bcd83820da00fff261b67d6490da58";
  }

  static const char* value(const ::unitree_legged_msgs::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2bcd83820da00ffULL;
  static const uint64_t static_value2 = 0xf261b67d6490da58ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/IMU";
  }

  static const char* value(const ::unitree_legged_msgs::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] quaternion\n"
"float32[3] gyroscope\n"
"float32[3] accelerometer\n"
"float32[3] rpy\n"
"int8 temperature\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.quaternion);
      stream.next(m.gyroscope);
      stream.next(m.accelerometer);
      stream.next(m.rpy);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::IMU_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "quaternion: ";
    if (v.quaternion.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.quaternion.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.quaternion[i]);
    }
    if (v.quaternion.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gyroscope: ";
    if (v.gyroscope.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.gyroscope.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.gyroscope[i]);
    }
    if (v.gyroscope.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "accelerometer: ";
    if (v.accelerometer.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.accelerometer.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.accelerometer[i]);
    }
    if (v.accelerometer.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rpy: ";
    if (v.rpy.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.rpy[i]);
    }
    if (v.rpy.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_IMU_H
